diff --git a/Makefile b/Makefile
index 73007b4..223404d 100644
--- a/Makefile
+++ b/Makefile
@@ -382,8 +382,12 @@ endif
 # Compiler specific warnings
 ifeq ($(findstring clang,$(notdir $(CC))),)
 # not using clang
+# BRCM_PATCH: Conflicts with toolchain
+#WARNINGS	+=		-Wunused-but-set-variable -Wmaybe-uninitialized	\
+#				-Wpacked-bitfield-compat -Wshift-overflow=2 \
+#				-Wlogical-op
 WARNINGS	+=		-Wunused-but-set-variable -Wmaybe-uninitialized	\
-				-Wpacked-bitfield-compat -Wshift-overflow=2 \
+				-Wpacked-bitfield-compat \
 				-Wlogical-op
 else
 # using clang
@@ -399,11 +403,11 @@ CPPFLAGS		=	${DEFINES} ${INCLUDES} ${MBEDTLS_INC} -nostdinc	\
 				$(ERRORS) $(WARNINGS)
 ASFLAGS			+=	$(CPPFLAGS) $(ASFLAGS_$(ARCH))			\
 				-ffreestanding -Wa,--fatal-warnings
+# BRCM_PATCH: Code optimization cause issue with Cortex-A9 and Cortex-A55
 TF_CFLAGS		+=	$(CPPFLAGS) $(TF_CFLAGS_$(ARCH))		\
 				-ffunction-sections -fdata-sections		\
 				-ffreestanding -fno-builtin -fno-common		\
-				-Os -std=gnu99
-
+				-O0 -std=gnu99
 ifeq (${SANITIZE_UB},on)
 TF_CFLAGS		+=	-fsanitize=undefined -fno-sanitize-recover
 endif
@@ -514,7 +518,7 @@ INCLUDE_TBBR_MK		:=	1
 
 ifneq (${SPD},none)
     ifeq (${ARCH},aarch32)
-        $(error "Error: SPD is incompatible with AArch32.")
+#        $(error "Error: SPD is incompatible with AArch32.")
     endif
 
     ifdef EL3_PAYLOAD_BASE
@@ -1066,6 +1070,9 @@ endif
 # This is done after including the platform specific makefile to allow the
 # platform to overwrite the default options
 ################################################################################
+# BRCM_PATCH: Need to add Broadcom SoC specific platform profiles
+$(eval $(call add_define,PLATFORM_FLAVOR_${BRCM_CHIP}))
+$(eval $(call add_define,_BCM9${BRCM_CHIP}_))
 
 $(eval $(call add_defines,\
     $(sort \
diff --git a/bl31/aarch64/bl31_entrypoint.S b/bl31/aarch64/bl31_entrypoint.S
index ed05864..f496910 100644
--- a/bl31/aarch64/bl31_entrypoint.S
+++ b/bl31/aarch64/bl31_entrypoint.S
@@ -12,6 +12,7 @@
 #include <lib/pmf/aarch64/pmf_asm_macros.S>
 #include <lib/runtime_instr.h>
 #include <lib/xlat_tables/xlat_mmu_helpers.h>
+#include <context.h>
 
 	.globl	bl31_entrypoint
 	.globl	bl31_warm_entrypoint
@@ -124,6 +125,13 @@ func bl31_entrypoint
 	sub	x1, x1, x0
 	bl	clean_dcache_range
 
+/* BRCM_PATCH: Save the CTX_PMCR_EL0 configured by boot loader
+*/
+	msr	spsel, #MODE_SP_ELX
+	mrs	x17, pmcr_el0
+	str	x17, [sp, #CTX_EL3STATE_OFFSET + CTX_PMCR_EL0]
+	msr	spsel, #MODE_SP_EL0
+
 	b	el3_exit
 endfunc bl31_entrypoint
 
@@ -133,6 +141,7 @@ endfunc bl31_entrypoint
 	 * warmboot entrypoint
 	 * --------------------------------------------------------------------
 	 */
+.align 8
 func bl31_warm_entrypoint
 #if ENABLE_RUNTIME_INSTRUMENTATION
 
diff --git a/bl32/sp_min/aarch32/entrypoint.S b/bl32/sp_min/aarch32/entrypoint.S
index 39f1065..63af4e4 100644
--- a/bl32/sp_min/aarch32/entrypoint.S
+++ b/bl32/sp_min/aarch32/entrypoint.S
@@ -160,6 +160,13 @@ func sp_min_entrypoint
 
 	/* r0 points to `smc_ctx_t` */
 	/* The PSCI cpu_context registers have been copied to `smc_ctx_t` */
+	/* BRCM_PATCH: PMCR passed from boot loader needs to be saved to initial ATF context.
+	 *             Othewise, PMCR setting will be lost, when ATF returns to next stage boot loader.
+	 */
+	push	{r1}
+	ldcopr	r1, PMCR
+	str	r1, [r0, #SMC_CTX_PMCR]
+	pop	{r1}
 	b	sp_min_exit
 endfunc sp_min_entrypoint
 
@@ -334,12 +341,24 @@ func sp_min_warm_entrypoint
 #else
 	mov	r0, #DISABLE_DCACHE
 #endif
+	/* BRCM_PATCH: BCM63138 (Cortex-A9) does not support long MMU descriptor.
+	 *             Need to use A9 specific short MMU descriptor.
+	 */
+#if defined(PLATFORM_FLAVOR_63138)
+	bl	a9_l1cache_inval_d
+	bl	a9_bl32_plat_enable_mmu
+#else
 	bl	bl32_plat_enable_mmu
+#endif
 
 #if SP_MIN_WITH_SECURE_FIQ
 	route_fiq_to_sp_min r0
 #endif
 
+#if defined(SPD_opteed)
+	bl opteed_setup
+#endif
+
 	bl	sp_min_warm_boot
 	bl	smc_get_next_ctx
 	/* r0 points to `smc_ctx_t` */
diff --git a/include/arch/aarch32/el3_common_macros.S b/include/arch/aarch32/el3_common_macros.S
index ad2a039..ada7b2e 100644
--- a/include/arch/aarch32/el3_common_macros.S
+++ b/include/arch/aarch32/el3_common_macros.S
@@ -115,8 +115,15 @@
 	 * ---------------------------------------------------------------------
 	 */
 #if ((ARM_ARCH_MAJOR > 7) || defined(ARMV7_SUPPORTS_VFP)) && !(__SOFTFP__)
+#if defined (PLATFORM_FLAVOR_63138)
+	bl	plat_my_core_pos
+	cmp	r0, #0
+	ldreq	r0, =(FPEXC_RESET_VAL | FPEXC_EN_BIT)
+	vmsreq	FPEXC, r0
+#else
 	ldr	r0, =(FPEXC_RESET_VAL | FPEXC_EN_BIT)
 	vmsr	FPEXC, r0
+#endif
 	isb
 #endif
 
@@ -174,7 +181,9 @@
 #else
 	ldr	r0, =(PMCR_RESET_VAL | PMCR_DP_BIT)
 #endif
+	/* BRCM_PATCH: Do not overwrite the setting done by BRCM boot loaders
 	stcopr	r0, PMCR
+	*/
 
 	/*
 	 * If Data Independent Timing (DIT) functionality is implemented,
diff --git a/include/common/bl_common.h b/include/common/bl_common.h
index 8cb4990..21dcec9 100644
--- a/include/common/bl_common.h
+++ b/include/common/bl_common.h
@@ -26,8 +26,9 @@
  * Constants to identify the location of a memory region in a given memory
  * layout.
 ******************************************************************************/
-#define TOP	U(0x1)
-#define BOTTOM	U(0x0)
+/* BRCM_PATCH: Avoid symbol conflict with Broadcom */
+#define ATF_TOP	U(0x1)
+#define ATF_BOTTOM	U(0x0)
 
 /*******************************************************************************
  * Constants to indicate type of exception to the common exception handler.
diff --git a/include/lib/cpus/aarch64/cortex_a53.h b/include/lib/cpus/aarch64/cortex_a53.h
index 6fe67a9..d288651 100644
--- a/include/lib/cpus/aarch64/cortex_a53.h
+++ b/include/lib/cpus/aarch64/cortex_a53.h
@@ -11,6 +11,7 @@
 
 /* Cortex-A53 midr for revision 0 */
 #define CORTEX_A53_MIDR			U(0x410FD030)
+#define CORTEX_B53_MIDR			U(0x420F1000)
 
 /* Retention timer tick definitions */
 #define RETENTION_ENTRY_TICKS_2		U(0x1)
diff --git a/lib/aarch32/misc_helpers.S b/lib/aarch32/misc_helpers.S
index 8b16f93..06070ba 100644
--- a/lib/aarch32/misc_helpers.S
+++ b/lib/aarch32/misc_helpers.S
@@ -9,6 +9,7 @@
 #include <assert_macros.S>
 #include <common/bl_common.h>
 #include <lib/xlat_tables/xlat_tables_defs.h>
+.arch_extension sec
 
 	.globl	smc
 	.globl	zeromem
diff --git a/lib/cpus/aarch64/cortex_a53.S b/lib/cpus/aarch64/cortex_a53.S
index df11d86..1cfe0e2 100644
--- a/lib/cpus/aarch64/cortex_a53.S
+++ b/lib/cpus/aarch64/cortex_a53.S
@@ -403,7 +403,7 @@ func cortex_a53_cpu_reg_dump
 	ret
 endfunc cortex_a53_cpu_reg_dump
 
-declare_cpu_ops cortex_a53, CORTEX_A53_MIDR, \
+declare_cpu_ops cortex_a53, CORTEX_B53_MIDR, \
 	cortex_a53_reset_func, \
 	cortex_a53_core_pwr_dwn, \
 	cortex_a53_cluster_pwr_dwn
diff --git a/make_helpers/armv7-a-cpus.mk b/make_helpers/armv7-a-cpus.mk
index eec85cc..889eec6 100644
--- a/make_helpers/armv7-a-cpus.mk
+++ b/make_helpers/armv7-a-cpus.mk
@@ -53,6 +53,14 @@ $(eval $(call add_defines,\
 )))
 endif
 
+# BRCM_PATCH: 1. BCM63138 (Cortex-A9) does have NEON.
+#             2. Even though A9 does not support LARGE_PAGE_ADDRESSING
+#                needed to enable it to get compilation going.
+ifeq ($(filter yes,$(ARM_CORTEX_A9)),yes)
+$(eval $(call add_define,ARMV7_SUPPORTS_LARGE_PAGE_ADDRESSING))
+$(eval $(call add_define,ARMV7_SUPPORTS_VFP))
+endif
+
 ifeq ($(ARM_CORTEX_A5),yes)
 $(eval $(call add_define,ARM_CORTEX_A5))
 endif
